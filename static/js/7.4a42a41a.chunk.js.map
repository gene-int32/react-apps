{"version":3,"sources":["../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","services/google/PeopleService.ts","../node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/@babel/runtime/helpers/esm/createClass.js"],"names":["_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError","PeopleService","contactGroups","baseUrl","instance","this","accept","paths","join","path","ContactGroups","peopleService","visitor","params","gapi","client","request","then","result","body","method","readGroupFields","resourceName","groupFields","updateGroupFields","_classCallCheck","Constructor","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype"],"mappings":"qJAIe,SAASA,EAAmBC,GACzC,OCJa,SAA4BA,GACzC,GAAIC,MAAMC,QAAQF,GAAM,OAAO,OAAAG,EAAA,GAAiBH,GDGzC,CAAkBA,IELZ,SAA0BI,GACvC,GAAsB,qBAAXC,QAAmD,MAAzBD,EAAKC,OAAOC,WAA2C,MAAtBF,EAAK,cAAuB,OAAOH,MAAMM,KAAKH,GFInF,CAAgBJ,IAAQ,OAAAQ,EAAA,GAA2BR,IGLvE,WACb,MAAM,IAAIS,UAAU,wIHIwE,G,oBIKxFC,E,WAKJ,WAA4BC,GAM1B,OANyD,yBAA/BA,gBAA8B,KAFzCC,QAAU,mCAGpBF,EAAcG,WACjBH,EAAcG,SAAWC,KAEzBH,EAAcI,OAAOD,OAEhBJ,EAAcG,S,wCAGvB,SAAKG,GACH,OAAKf,MAAMC,QAAQc,GAGb,GAAN,OAAU,CAACF,KAAKF,SAAN,SAAkBI,IAAOC,KAAK,MAF/BH,KAAKI,KAAK,CAACF,Q,KAhBlBN,EACWG,c,MAwBXM,E,iDACIC,mB,4CAER,SAAOC,GACLP,KAAKM,cAAgBC,I,sBAMvB,SAASC,GAKP,OAAOC,KAAKC,OACTC,QAAQ,CACPP,KAAMJ,KAAKM,cAAcF,KAAK,0BAC9BI,WAEDI,MAAK,qBAAEC,Y,oBAMZ,SAAOC,GAAoG,IAAD,EACxG,OAAOL,KAAKC,OACTC,QAAQ,CACPP,KAAMJ,KAAKM,cAAcF,KAAK,iBAC9BW,OAAQ,OACRD,KAAK,2BACAA,GADD,IAEFE,gBAAe,UAAEF,EAAKE,uBAAP,aAAE,EAAsBb,KAAK,SAG/CS,MAAK,qBAAEC,Y,oBAMZ,SAAOI,GAA+E,IAAzDT,EAAwD,uDAAnB,GAChE,OAAOC,KAAKC,OACTC,QAAQ,CACPP,KAAMJ,KAAKM,cAAcF,KAAKa,GAC9BF,OAAQ,SACRP,WAEDI,MAAK,qBAAEC,Y,iBAMZ,SACEI,GAEwB,IADxBT,EACuB,uDAD6C,GAEpE,OAAOC,KAAKC,OACTC,QAAQ,CACPP,KAAMJ,KAAKM,cAAcF,KAAKa,GAC9BT,WAEDI,MAAK,qBAAEC,Y,kBAMZ,WAYI,IAAD,EAXDL,EAWC,uDANG,GAOJ,OAAOC,KAAKC,OACTC,QAAQ,CACPP,KAAMJ,KAAKM,cAAcF,KAAK,iBAC9BI,OAAO,2BACFA,GADC,IAEJU,YAAW,UAAEV,EAAOU,mBAAT,aAAE,EAAoBf,KAAK,SAGzCS,MAAK,qBAAEC,Y,oBAMZ,SACEI,EACAH,GAKwB,IAAD,IACvB,OAAOL,KAAKC,OACTC,QAAQ,CACPP,KAAMJ,KAAKM,cAAcF,KAAKa,GAC9BF,OAAQ,MACRD,KAAK,2BACAA,GADD,IAEFK,kBAAiB,UAAEL,EAAKK,yBAAP,aAAE,EAAwBhB,KAAK,KAChDa,gBAAe,UAAEF,EAAKE,uBAAP,aAAE,EAAsBb,KAAK,SAG/CS,MAAK,qBAAEC,c,KAMC,cAAIjB,EAAc,IAAIS,I,gCC5JtB,SAASe,EAAgBrB,EAAUsB,GAChD,KAAMtB,aAAoBsB,GACxB,MAAM,IAAI1B,UAAU,qCAFxB,mC,gCCAA,SAAS2B,EAAkBC,EAAQC,GACjC,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CACrC,IAAIE,EAAaH,EAAMC,GACvBE,EAAWC,WAAaD,EAAWC,aAAc,EACjDD,EAAWE,cAAe,EACtB,UAAWF,IAAYA,EAAWG,UAAW,GACjDC,OAAOC,eAAeT,EAAQI,EAAWM,IAAKN,IAInC,SAASO,EAAab,EAAac,EAAYC,GAG5D,OAFID,GAAYb,EAAkBD,EAAYgB,UAAWF,GACrDC,GAAad,EAAkBD,EAAae,GACzCf,EAbT","file":"static/js/7.4a42a41a.chunk.js","sourcesContent":["import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import {ContactGroup} from '../../types/google';\n\ninterface IAcceptor<T> {\n  accept(visitor: T): void;\n}\n\n/**\n * People API.\n * Provides access to information about profiles and contacts.\n */\nclass PeopleService {\n  private static instance: PeopleService;\n\n  private readonly baseUrl = 'https://people.googleapis.com/v1';\n\n  constructor(public readonly contactGroups: ContactGroups) {\n    if (!PeopleService.instance) {\n      PeopleService.instance = this;\n\n      contactGroups.accept(this);\n    }\n    return PeopleService.instance;\n  }\n\n  path(paths: string | string[]): string {\n    if (!Array.isArray(paths)) {\n      return this.path([paths]);\n    }\n    return `${[this.baseUrl, ...paths].join('/')}`;\n  }\n}\n\n/**\n * REST Resource: contactGroups.\n */\nclass ContactGroups implements IAcceptor<PeopleService> {\n  private peopleService!: PeopleService;\n\n  accept(visitor: PeopleService): void {\n    this.peopleService = visitor;\n  }\n\n  /**\n   * Get a list of contact groups owned by the authenticated user by specifying a list of contact group resource names.\n   */\n  batchGet(params: {\n    resourceNames: string[];\n    maxMembers?: number;\n    groupFields?: ContactGroupFields[];\n  }): Promise<ContactGroup[]> {\n    return gapi.client\n      .request({\n        path: this.peopleService.path('contactGroups:batchGet'),\n        params,\n      })\n      .then(({result}) => result);\n  }\n\n  /**\n   * Create a new contact group owned by the authenticated user.\n   */\n  create(body: {contactGroup: ContactGroup; readGroupFields?: ContactGroupFields[]}): Promise<ContactGroup> {\n    return gapi.client\n      .request({\n        path: this.peopleService.path('contactGroups'),\n        method: 'POST',\n        body: {\n          ...body,\n          readGroupFields: body.readGroupFields?.join(','),\n        },\n      })\n      .then(({result}) => result);\n  }\n\n  /**\n   * Delete an existing contact group owned by the authenticated user by specifying a contact group resource name.\n   */\n  delete(resourceName: string, params: {deleteContacts?: boolean} = {}): Promise<void> {\n    return gapi.client\n      .request({\n        path: this.peopleService.path(resourceName),\n        method: 'DELETE',\n        params,\n      })\n      .then(({result}) => result);\n  }\n\n  /**\n   * Get a specific contact group owned by the authenticated user by specifying a contact group resource name.\n   */\n  get(\n    resourceName: string,\n    params: {maxMembers?: number; groupFields?: ContactGroupFields[]} = {}\n  ): Promise<ContactGroup> {\n    return gapi.client\n      .request({\n        path: this.peopleService.path(resourceName),\n        params,\n      })\n      .then(({result}) => result);\n  }\n\n  /**\n   * List all contact groups owned by the authenticated user.\n   */\n  list(\n    params: {\n      pageToken?: string;\n      pageSize?: number;\n      syncToken?: string;\n      groupFields?: ContactGroupFields[];\n    } = {}\n  ): Promise<{\n    contactGroups: ContactGroup[];\n    nextPageToken?: string;\n    nextSyncToken?: string;\n    totalItems: number;\n  }> {\n    return gapi.client\n      .request({\n        path: this.peopleService.path('contactGroups'),\n        params: {\n          ...params,\n          groupFields: params.groupFields?.join(','),\n        },\n      })\n      .then(({result}) => result);\n  }\n\n  /**\n   * Update the name of an existing contact group owned by the authenticated user.\n   */\n  update(\n    resourceName: string,\n    body: {\n      contactGroup: ContactGroup;\n      updateGroupFields?: Extract<ContactGroupFields, 'clientData' | 'name'>[];\n      readGroupFields?: ContactGroupFields[];\n    }\n  ): Promise<ContactGroup> {\n    return gapi.client\n      .request({\n        path: this.peopleService.path(resourceName),\n        method: 'PUT',\n        body: {\n          ...body,\n          updateGroupFields: body.updateGroupFields?.join(','),\n          readGroupFields: body.readGroupFields?.join(','),\n        },\n      })\n      .then(({result}) => result);\n  }\n}\n\ntype ContactGroupFields = 'clientData' | 'groupType' | 'memberCount' | 'metadata' | 'name';\n\nexport default new PeopleService(new ContactGroups());\n","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}"],"sourceRoot":""}